const Solutions = [
    "cries",
    "plays",
    "haste",
    "caste",
    "Abuse",
    "Adult",
    "Agent",
    "Anger",
    "Apple",
    "Award",
    "Basis",
    "Beach",
    "Birth",
    "Block",
    "Blood",
    "Board",
    "Brain",
    "Bread",
    "Break",
    "Brown",
    "Buyer",
    "Cause",
    "Chain",
    "Chair",
    "Chest",
    "Chief",
    "Child",
    "China",
    "Claim",
    "Class",
    "Clock",
    "Coach",
    "Coast",
    "Court",
    "Cover",
    "Cream",
    "Crime",
    "Cross",
    "Crowd",
    "Crown",
    "Cycle",
    "Dance",
    "Death",
    "Depth",
    "Doubt",
    "Draft",
    "Drama",
    "Dream",
    "Dress",
    "Drink",
    "Drive",
    "Earth",
    "Enemy",
    "Entry",
    "Error",
    "Event",
    "Faith",
    "Fault",
    "Field",
    "Fight",
    "Final",
    "Floor",
    "Focus",
    "Force",
    "Frame",
    "Frank",
    "Front",
    "Fruit",
    "Glass",
    "Grant",
    "Grass",
    "Green",
    "Group",
    "Guide",
    "Heart",
    "Henry",
    "Horse",
    "Hotel",
    "House",
    "Image",
    "Index",
    "Input",
    "Issue",
    "Japan",
    "Jones",
    "Judge",
    "Knife",
    "Laura",
    "Layer",
    "Level",
    "Lewis",
    "Light",
    "Limit",
    "Lunch",
    "Major",
    "March",
    "Match",
    "Metal",
    "Model",
    "Money",
    "Month",
    "Motor",
    "Mouth",
    "Music",
    "Night",
    "Noise",
    "North",
    "Novel",
    "Nurse",
    "Offer",
    "Order",
    "Other",
    "Owner",
    "Panel",
    "Paper",
    "Party",
    "Peace",
    "Peter",
    "Phase",
    "Phone",
    "Piece",
    "Pilot",
    "Pitch",
    "Place",
    "Plane",
    "Plant",
    "Plate",
    "Point",
    "Pound",
    "Power",
    "Press",
    "Price",
    "Pride",
    "Prize",
    "Proof",
    "Queen",
    "Radio",
    "Range",
    "Ratio",
    "Reply",
    "Right",
    "River",
    "Round",
    "Route",
    "Rugby",
    "Scale",
    "Scene",
    "Scope",
    "Score",
    "Sense",
    "Shape",
    "Share",
    "Sheep",
    "Sheet",
    "Shift",
    "Shirt",
    "Shock",
    "Sight",
    "Simon",
    "Skill",
    "Sleep",
    "Smile",
    "Smith",
    "Smoke",
    "Sound",
    "South",
    "Space",
    "Speed",
    "Spite",
    "Sport",
    "Squad",
    "Staff",
    "Stage",
    "Start",
    "State",
    "Steam",
    "Steel",
    "Stock",
    "Stone",
    "Store",
    "Study",
    "Stuff",
    "Style",
    "Sugar",
    "Table",
    "Taste",
    "Terry",
    "Theme",
    "Thing",
    "Title",
    "Total",
    "Touch",
    "Tower",
    "Track",
    "Trade",
    "Train",
    "Trend",
    "Trial",
    "Trust",
    "Truth",
    "Uncle",
    "Union",
    "Unity",
    "Value",
    "Video",
    "Visit",
    "Voice",
    "Waste",
    "Watch",
    "Water",
    "While",
    "White",
    "Whole",
    "Woman",
    "World",
    "Youth",
    "Alcon",
    "Aught",
    "Hella",
    "Ought",
    "Thame",
    "There",
    "Thine",
    "Thine",
    "Where",
    "Which",
    "Whose",
    "Whoso",
    "Yours",
    "Yours",
    "Admit",
    "Adopt",
    "Agree",
    "Allow",
    "Alter",
    "Apply",
    "Argue",
    "Arise",
    "Avoid",
    "Begin",
    "Blame",
    "Break",
    "Bring",
    "Build",
    "Burst",
    "Carry",
    "Catch",
    "Cause",
    "Check",
    "Claim",
    "Clean",
    "Clear",
    "Climb",
    "Close",
    "Count",
    "Cover",
    "Cross",
    "Dance",
    "Doubt",
    "Drink",
    "Drive",
    "Enjoy",
    "Enter",
    "Exist",
    "Fight",
    "Force",
    "Guess",
    "Imply",
    "Issue",
    "Judge",
    "Laugh",
    "Learn",
    "Leave",
    "Limit",
    "Marry",
    "Match",
    "Occur",
    "Offer",
    "Order",
    "Phone",
    "Place",
    "Point",
    "Press",
    "Prove",
    "Raise",
    "Reach",
    "Refer",
    "Relax",
    "Serve",
    "Shall",
    "Share",
    "Shift",
    "Shoot",
    "Sleep",
    "Solve",
    "Sound",
    "Speak",
    "Spend",
    "Split",
    "Stand",
    "Start",
    "State",
    "Stick",
    "Study",
    "Teach",
    "Thank",
    "Think",
    "Throw",
    "Touch",
    "Train",
    "Treat",
    "Trust",
    "Visit",
    "Voice",
    "Waste",
    "Watch",
    "Worry",
    "Would",
    "Write",
    "Above",
    "Acute",
    "Alive",
    "Alone",
    "Angry",
    "Aware",
    "Awful",
    "Basic",
    "Black",
    "Blind",
    "Brave",
    "Brief",
    "Broad",
    "Brown",
    "Cheap",
    "Chief",
    "Civil",
    "Clean",
    "Clear",
    "Close",
    "Crazy",
    "Daily",
    "Dirty",
    "Early",
    "Empty",
    "Equal",
    "Exact",
    "Extra",
    "Faint",
    "False",
    "Fifth",
    "Final",
    "First",
    "Fresh",
    "Front",
    "Funny",
    "Giant",
    "Grand",
    "Great",
    "Green",
    "Gross",
    "Happy",
    "Harsh",
    "Heavy",
    "Human",
    "Ideal",
    "Inner",
    "Joint",
    "Large",
    "Legal",
    "Level",
    "Light",
    "Local",
    "Loose",
    "Lucky",
    "Magic",
    "Major",
    "Minor",
    "Moral",
    "Naked",
    "Nasty",
    "Naval",
    "Other",
    "Outer",
    "Plain",
    "Prime",
    "Prior",
    "Proud",
    "Quick",
    "Quiet",
    "Rapid",
    "Ready",
    "Right",
    "Roman",
    "Rough",
    "Round",
    "Royal",
    "Rural",
    "Sharp",
    "Sheer",
    "Short",
    "Silly",
    "Sixth",
    "Small",
    "Smart",
    "Solid",
    "Sorry",
    "Spare",
    "Steep",
    "Still",
    "Super",
    "Sweet",
    "Thick",
    "Third",
    "Tight",
    "Total",
    "Tough",
    "Upper",
    "Upset",
    "Urban",
    "Usual",
    "Vague",
    "Valid",
    "Vital",
    "White",
    "Whole",
    "Wrong",
    "Young",
    "Aback",
    "Abaft",
    "Aboon",
    "About",
    "Above",
    "Accel",
    "Adown",
    "Afoot",
    "Afore",
    "Afoul",
    "After",
    "Again",
    "Agape",
    "Agogo",
    "Agone",
    "Ahead",
    "Ahull",
    "Alife",
    "Alike",
    "Aline",
    "Aloft",
    "Alone",
    "Along",
    "Aloof",
    "Aloud",
    "Amiss",
    "Amply",
    "Amuck",
    "Apace",
    "Apart",
    "Aptly",
    "Arear",
    "Aside",
    "Askew",
    "Awful",
    "Badly",
    "Bally",
    "Below",
    "Canny",
    "Cheap",
    "Clean",
    "Clear",
    "Coyly",
    "Daily",
    "Dimly",
    "Dirty",
    "Ditto",
    "Drily",
    "Dryly",
    "Dully",
    "Early",
    "Extra",
    "False",
    "Fatly",
    "Feyly",
    "First",
    "Fitly",
    "Forte",
    "Forth",
    "Fresh",
    "Fully",
    "Funny",
    "Gaily",
    "Gayly",
    "Godly",
    "Great",
    "Haply",
    "Heavy",
    "Hella",
    "Hence",
    "Hotly",
    "Icily",
    "Infra",
    "Intl.",
    "Jildi",
    "Jolly",
    "Laxly",
    "Lento",
    "Light",
    "Lowly",
    "Madly",
    "Maybe",
    "Never",
    "Newly",
    "Nobly",
    "Oddly",
    "Often",
    "Other",
    "Ought",
    "Party",
    "Piano",
    "Plain",
    "Plonk",
    "Plumb",
    "Prior",
    "Queer",
    "Quick",
    "Quite",
    "Ramen",
    "Rapid",
    "Redly",
    "Right",
    "Rough",
    "Round",
    "Sadly",
    "Secus",
    "Selly",
    "Sharp",
    "Sheer",
    "Shily",
    "Short",
    "Shyly",
    "Silly",
    "Since",
    "Sleek",
    "Slyly",
    "Small",
    "So-So",
    "Sound",
    "Spang",
    "Srsly",
    "Stark",
    "Still",
    "Stone",
    "Stour",
    "Super",
    "Tally",
    "Tanto",
    "There",
    "Thick",
    "Tight",
    "Today",
    "Tomoz",
    "Truly",
    "Twice",
    "Under",
    "Utter",
    "Verry",
    "Wanly",
    "Wetly",
    "Where",
    "Wrong",
    "Wryly",
    "Abaft",
    "Aboon",
    "About",
    "Above",
    "Adown",
    "Afore",
    "After",
    "Along",
    "Aloof",
    "Among",
    "Below",
    "Circa",
    "Cross",
    "Furth",
    "Minus",
    "Neath",
    "Round",
    "Since",
    "Spite",
    "Under",
    "Until",
    "Aargh",
    "Adieu",
    "Adios",
    "Alack",
    "Aloha",
    "Avast",
    "Bakaw",
    "Basta",
    "Begad",
    "Bless",
    "Blige",
    "Brava",
    "Bravo",
    "Bring",
    "Chook",
    "Damme",
    "Dildo",
    "Ditto",
    "Frick",
    "Fudge",
    "Golly",
    "Gratz",
    "Hallo",
    "Hasta",
    "Havoc",
    "Hella",
    "Hello",
    "Howay",
    "Howdy",
    "Hullo",
    "Huzza",
    "Jesus",
    "Kapow",
    "Loose",
    "Lordy",
    "Marry",
    "Mercy",
    "Night",
    "Plonk",
    "Psych",
    "Quite",
    "Salve",
    "Skoal",
    "Sniff",
    "Sooey",
    "There",
    "Thiam",
    "Thwap",
    "Tough",
    "Twirp",
    "Viola",
    "Vivat",
    "Wacko",
    "Wahey",
    "Whist",
    "Wilma",
    "Wirra",
    "Woops",
    "Wowie",
    "Yecch",
    "Yeeha",
    "Yeesh",
    "Yowch",
    "Zowie"
];

const WORD = Solutions[Math.floor(Math.random()*Solutions.length)].toLowerCase();
const ALPHANUMERICS = "1234567890poiuytrewqasdfghjklmnbvcxz";

const EndGameMessage= {
    "1": "Unbelievable!",
    "2": "Incredible!",
    "3": "Splendid!",
    "4": "Good job!",
    "5": "Not bad!",
    "6": "Clutch!",
    "7": `The correct word was ${WORD}!`,
}

const SAVESTRING = "VERBLE_SAVE_FILE";
let Iterator = 0;

function addAttempt(){
    Iterator++;
    let container = document.createElement("div");
    container.classList.add("container");
    let attempt = document.createElement("div");
    attempt.classList.add("row");
    let iterator = 1;
    while (iterator < 6){
        let letter = document.createElement("input");
        letter.classList.add("col", "solution-letter", "mh-100", "p-1", "d-inline-block", "m-1", "text-center", "border", "bg-dark", "text-white");
        letter.setAttribute("type", "text");
        letter.maxLength = 1;
        letter.id = `letter-${Iterator}-${iterator}`;
        letter.onpaste = () => {
            return false;
        }
        letter.ondrop = () => {
            return false;
        }
        const previousId = `letter-${Iterator}-${iterator-1}`;
        const nextId = `letter-${Iterator}-${iterator+1}`;
        switch (iterator){
            case 1:
                letter.onkeyup = (e) => {
                    if (ALPHANUMERICS.includes(e.key)){
                        document.getElementById(nextId).focus();
                    }
                }
                break;
            case 5:
                letter.onkeyup = (e) => {
                    if (e.key === "Backspace"){
                        document.getElementById(previousId).focus();
                    }
                }
                break;
            default:
                letter.onkeyup = (e) => {
                    if (ALPHANUMERICS.includes(e.key)){
                        document.getElementById(nextId).focus();
                    }
                    if (e.key === "Backspace"){
                        document.getElementById(previousId).focus();
                    }
                }
                break;
        }
        attempt.appendChild(letter);
        iterator++;
    }
    container.appendChild(attempt);
    document.getElementById("attempts").appendChild(container);
}

function check(){
    const lastChild = document.getElementById("attempts").lastChild;
    var thing = lastChild.querySelectorAll(".solution-letter");
    let guess = '';
    thing.forEach(letter => {
        guess += letter.value;
    })
    guess = guess.toLowerCase();
    console.log(guess);
    let word = WORD.toLowerCase();
    let currentWord = word;
    if (Solutions.map(word => word.toLowerCase()).includes(guess)){  
        let iterator = 0
        thing.forEach(letter => {
            if (word[iterator] === letter.value){
                letter.classList.remove("bg-dark")
                letter.classList.add("bg-success");
            }
            else if (currentWord.includes(letter.value)){
                letter.classList.remove("bg-dark")
                letter.classList.add("bg-warning");
            }
            currentWord = currentWord.replace(letter.value, "");
            letter.disabled = true;
            iterator++;
            console.log(letter.value);
            document.querySelector(`#${letter.value}`).classList.remove("btn-light");
            document.querySelector(`#${letter.value}`).classList.add("btn-dark", "border");
        })
        if (guess == WORD){
            addResultToSave(Iterator.toString());
            return;
        }
        else if (Iterator === 6){
            addResultToSave("7");
            return;
        }
        addAttempt();
    }
    else {
        document.querySelector("#invalid .toast-body span").textContent = `${guess} is not a valid Verble word`;
        $("#invalid").toast('show');
    }
}

function addResultToSave(counter){
    let save = getSave();
    if (!save){
        save = {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
        }
    }

    save[counter]++;
    localStorage.setItem(SAVESTRING, JSON.stringify(save));
    postResults(counter);
}

function postResults(counter){
    const save = getSave();
    if (save){
        const sum = Object.values(save).reduce((a, b) => a + b);
        console.log(EndGameMessage[counter]);
        document.querySelector("#end-game .modal-title").textContent = EndGameMessage[counter];
        for (attempt in save){
            const nextPart = `${attempt === "7" ? "fail" : attempt}: ${Math.round(save[attempt]*10000/sum)/100}%`
            console.log(nextPart);
            const div = document.createElement("div");
            div.textContent = nextPart;
            div.classList.add("text-dark");
            document.querySelector("#end-game .modal-body").appendChild(div);
        }
        (new bootstrap.Modal(document.getElementById('end-game'))).show()
        // $("#end-game").toast('show');
    }
}

function getSave(){
    return JSON.parse(localStorage.getItem(SAVESTRING));
}

window.onkeydown = e => {
    if (e.key === "Enter"){
        check();
    }
}

window.onload = () => {
    addAttempt();
}